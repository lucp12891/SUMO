while (i <= n_factors && length(available_indices) > 0) {
fallback_size <- min(ceiling(min_percent * n_features), length(available_indices))
start_idx <- available_indices[1]
block <- start_idx:(start_idx + fallback_size - 1)
assigned_blocks[[paste0("factor", i)]] <- block
available_indices <- setdiff(available_indices, block)
i <- i + 1
}
return(assigned_blocks)
}
generate_feature_blocks(n_features = 1000, n_factors = 5, seed = 123)
generate_feature_blocks(n_features = 2000, n_factors = 5, seed = 123)
generate_sequential_feature_block <- function(available_indices, min_percent = 0.05, max_percent = 0.15, used_blocks = list()) {
total_features <- max(available_indices)
min_block_size <- max(5, ceiling(total_features * min_percent))
max_block_size <- min(ceiling(total_features * max_percent), length(available_indices))
block_size <- sample(min_block_size:max_block_size, 1)
possible_starts <- available_indices[available_indices + block_size - 1 <= max(available_indices)]
for (start_idx in sample(possible_starts)) {
block <- start_idx:(start_idx + block_size - 1)
# Check overlap
overlaps <- any(unlist(lapply(used_blocks, function(x) any(block %in% x))))
if (!overlaps && all(block %in% available_indices)) {
return(block)
}
return(integer(0))  # Return empty if no valid block
}
# Step 4: Generate feature weights (betas) and construct omic-specific datasets
for (omic_idx in 1:k) {
n_features <- vector_features[omic_idx]
feature_mean <- signal.features[[omic_idx]][1]
feature_sd <- signal.features[[omic_idx]][2]
omic_data <- matrix(0, nrow = n_samples, ncol = n_features)
list_betas[[omic_idx]] <- list()
# Keep track of used feature blocks for this omic
used_feature_blocks <- list()
for (factor_i in 1:n_factors) {
# factor_name <- paste0("factor", factor_i)
# if (!(omic_idx %in% factor_omic_map[[factor_name]])) next
#
# # Assign signal features for this factor and omic
# feature_block <- sample(1:n_features, min(ceiling(n_features / n_factors), n_features), replace = FALSE)
# beta <- rnorm(n_features, mean = 0, sd = 0.01)
# beta[feature_block] <- rnorm(length(feature_block), mean = feature_mean + 0.5 * factor_i, sd = feature_sd)
# list_betas[[omic_idx]][[paste0("beta", factor_i)]] <- beta
#
# alpha <- list_alphas[[paste0("alpha", factor_i)]]
# omic_data <- omic_data + outer(alpha, beta)
factor_name <- paste0("factor", factor_i)
if (!(omic_idx %in% factor_omic_map[[factor_name]])) next
# Generate a non-overlapping, sequential feature block
available_indices <- setdiff(1:n_features, unlist(used_feature_blocks))
feature_block <- generate_sequential_feature_block(available_indices, used_blocks = used_feature_blocks)
# Store for future overlap checks
used_feature_blocks[[factor_name]] <- feature_block
# Assign feature weights
beta <- rnorm(n_features, mean = 0, sd = 0.01)
beta[feature_block] <- rnorm(length(feature_block), mean = feature_mean + 0.5 * factor_i, sd = feature_sd)
list_betas[[omic_idx]][[paste0("beta", factor_i)]] <- beta
alpha <- list_alphas[[paste0("alpha", factor_i)]]
omic_data <- omic_data + outer(alpha, beta)
}
# Add noise
signal_variance <- var(as.vector(omic_data))
noise_sd <- sqrt(signal_variance / snr)
noise_matrix <- matrix(rnorm(n_samples * n_features, mean = 0, sd = noise_sd), nrow = n_samples)
omic_data <- omic_data + noise_matrix
# Store
colnames(omic_data) <- paste0("omic", omic_idx, "_feature_", 1:n_features)
rownames(omic_data) <- paste0("sample_", 1:n_samples)
omic.list[[omic_idx]] <- omic_data
}
list_betas
# Keep track of used feature blocks for this omic
used_feature_blocks <- list()
factor_i
# if (!(omic_idx %in% factor_omic_map[[factor_name]])) next
#
# # Assign signal features for this factor and omic
# feature_block <- sample(1:n_features, min(ceiling(n_features / n_factors), n_features), replace = FALSE)
# beta <- rnorm(n_features, mean = 0, sd = 0.01)
# beta[feature_block] <- rnorm(length(feature_block), mean = feature_mean + 0.5 * factor_i, sd = feature_sd)
# list_betas[[omic_idx]][[paste0("beta", factor_i)]] <- beta
#
# alpha <- list_alphas[[paste0("alpha", factor_i)]]
# omic_data <- omic_data + outer(alpha, beta)
factor_name <- paste0("factor", factor_i)
if (!(omic_idx %in% factor_omic_map[[factor_name]])) next
# Generate a non-overlapping, sequential feature block
available_indices <- setdiff(1:n_features, unlist(used_feature_blocks))
feature_block <- generate_sequential_feature_block(available_indices, used_blocks = used_feature_blocks)
feature_block
# Store for future overlap checks
used_feature_blocks[[factor_name]] <- feature_block
#' @param n_samples Total number of samples across all omics
#' @param n_factors Number of latent factors
#' @param snr Signal-to-noise ratio
#' @param signal.samples Mean and SD for generating sample signals (e.g., c(mean, sd))
#' @param signal.features List of vectors with mean and SD for features for each omic (e.g., list(c(3,0.2), c(2.5,0.15)))
#' @param factor_structure Character. "shared", "exclusive", "mixed", or "custom" factor distribution
#' @param num.factor Character. "multiple" (default)
#' @param seed Optional. Set random seed for reproducibility
#' @return A list containing simulated omics, annotations, and factors
#' @export
OmixCraftMultiHD <- function(
vector_features,
n_samples,
n_factors,
snr = 2,
signal.samples = c(5, 1),
signal.features = NULL,
factor_structure = "mixed",
num.factor = "multiple",
seed = NULL
) {
if (!is.null(seed)) set.seed(seed)
# Validate input
if (length(vector_features) < 3) stop("Provide at least 3 omics for M_SUMO simulation")
k <- length(vector_features)
if (!is.list(signal.features) || length(signal.features) != k) {
stop("signal.features must be a list of length equal to vector_features")
}
if (!num.factor %in% c("multiple")) stop("Only 'multiple' is supported in M_SUMO")
if (!factor_structure %in% c("shared", "exclusive", "mixed", "custom")) stop("Invalid factor_structure option")
# Step 1: Divide samples into non-overlapping blocks for each factor with sequential indices and random gaps
assigned_indices_samples <- list()
used_indices <- c()
max_range <- n_samples
available_indices <- setdiff(1:max_range, used_indices)
i <- 1
while (i <= n_factors && length(available_indices) > 5) {
block_size <- sample(5:min(ceiling(n_samples / n_factors) + 5, length(available_indices)), 1)
possible_starts <- available_indices[available_indices + block_size - 1 <= max(available_indices)]
if (length(possible_starts) == 0) break
start_idx <- sample(possible_starts, 1)
block <- start_idx:(start_idx + block_size - 1)
if (all(block %in% available_indices)) {
assigned_indices_samples[[paste0("factor", i)]] <- block
used_indices <- c(used_indices, block)
available_indices <- setdiff(1:max_range, used_indices)
i <- i + 1
} else {
# skip block if overlap found
available_indices <- setdiff(available_indices, start_idx)
}
# Attempt to assign empty factor slots with remaining space if needed
while (i <= n_factors && length(available_indices) >= 5) {
block_size <- sample(5:min(ceiling(n_samples / n_factors) + 5, length(available_indices)), 1)
possible_starts <- available_indices[available_indices + block_size - 1 <= max(available_indices)]
if (length(possible_starts) == 0) break
start_idx <- sample(possible_starts, 1)
block <- start_idx:(start_idx + block_size - 1)
if (all(block %in% available_indices)) {
assigned_indices_samples[[paste0("factor", i)]] <- block
used_indices <- c(used_indices, block)
available_indices <- setdiff(1:max_range, used_indices)
i <- i + 1
} else {
available_indices <- setdiff(available_indices, start_idx)
}
# Final fallback to fill any remaining factor slots with random valid blocks
while (i <= n_factors) {
fallback_size <- min(5, length(available_indices))
if (fallback_size < 5) {
assigned_indices_samples[[paste0("factor", i)]] <- sample(1:n_samples, 5)
} else {
fallback_start <- sample(available_indices[1:(length(available_indices) - fallback_size + 1)], 1)
fallback_block <- fallback_start:(fallback_start + fallback_size - 1)
assigned_indices_samples[[paste0("factor", i)]] <- fallback_block
used_indices <- c(used_indices, fallback_block)
available_indices <- setdiff(1:max_range, used_indices)
}
i <- i + 1
}
# Initialize tracking containers
omic.list <- vector("list", k)
list_alphas <- list()
list_betas <- vector("list", k)
signal_annotation <- list(samples = assigned_indices_samples)
# Continue with latent factor design...
# (to be implemented in next chunk)
# Step 2: Define factor allocation across omics
factor_omic_map <- list()
for (i in 1:n_factors) {
if (factor_structure == "shared") {
factor_omic_map[[paste0("factor", i)]] <- 1:k
} else if (factor_structure == "exclusive") {
assigned <- sample(1:k, 1)
factor_omic_map[[paste0("factor", i)]] <- assigned
} else if (factor_structure == "mixed") {
assigned <- sort(sample(1:k, sample(1:k, 1)))
factor_omic_map[[paste0("factor", i)]] <- assigned
} else if (factor_structure == "custom") {
stop("Custom factor_structure currently not supported in this version")
}
# Step 3: Create alphas (sample scores) for each factor
for (i in 1:n_factors) {
scores <- rnorm(n_samples, mean = signal.samples[1], sd = signal.samples[2])
alpha_vec <- numeric(n_samples)
alpha_vec[assigned_indices_samples[[paste0("factor", i)]]] <- scores[assigned_indices_samples[[paste0("factor", i)]]]
list_alphas[[paste0("alpha", i)]] <- alpha_vec
}
# Step 4: Generate feature weights (betas) and construct omic-specific datasets
for (omic_idx in 1:k) {
n_features <- vector_features[omic_idx]
feature_mean <- signal.features[[omic_idx]][1]
feature_sd <- signal.features[[omic_idx]][2]
omic_data <- matrix(0, nrow = n_samples, ncol = n_features)
list_betas[[omic_idx]] <- list()
# Keep track of used feature blocks for this omic
used_feature_blocks <- list()
for (factor_i in 1:n_factors) {
# factor_name <- paste0("factor", factor_i)
# if (!(omic_idx %in% factor_omic_map[[factor_name]])) next
#
# # Assign signal features for this factor and omic
# feature_block <- sample(1:n_features, min(ceiling(n_features / n_factors), n_features), replace = FALSE)
# beta <- rnorm(n_features, mean = 0, sd = 0.01)
# beta[feature_block] <- rnorm(length(feature_block), mean = feature_mean + 0.5 * factor_i, sd = feature_sd)
# list_betas[[omic_idx]][[paste0("beta", factor_i)]] <- beta
#
# alpha <- list_alphas[[paste0("alpha", factor_i)]]
# omic_data <- omic_data + outer(alpha, beta)
factor_name <- paste0("factor", factor_i)
if (!(omic_idx %in% factor_omic_map[[factor_name]])) next
# Generate a non-overlapping, sequential feature block
available_indices <- setdiff(1:n_features, unlist(used_feature_blocks))
feature_block <- generate_sequential_feature_block(available_indices, used_blocks = used_feature_blocks)
# Store for future overlap checks
used_feature_blocks[[factor_name]] <- feature_block
# Assign feature weights
beta <- rnorm(n_features, mean = 0, sd = 0.01)
beta[feature_block] <- rnorm(length(feature_block), mean = feature_mean + 0.5 * factor_i, sd = feature_sd)
list_betas[[omic_idx]][[paste0("beta", factor_i)]] <- beta
alpha <- list_alphas[[paste0("alpha", factor_i)]]
omic_data <- omic_data + outer(alpha, beta)
}
# Add noise
signal_variance <- var(as.vector(omic_data))
noise_sd <- sqrt(signal_variance / snr)
noise_matrix <- matrix(rnorm(n_samples * n_features, mean = 0, sd = noise_sd), nrow = n_samples)
omic_data <- omic_data + noise_matrix
# Store
colnames(omic_data) <- paste0("omic", omic_idx, "_feature_", 1:n_features)
rownames(omic_data) <- paste0("sample_", 1:n_samples)
omic.list[[omic_idx]] <- omic_data
}
signal_annotation$features <- list_betas
# Step 5: Finalize simulated object
names(omic.list) <- paste0("omic", seq_len(k))
concatenated_dataset <- do.call(cbind, omic.list)
rownames(concatenated_dataset) <- paste0("sample_", seq_len(n_samples))
sim_object <- list(
concatenated_datasets = list(concatenated_dataset),
omics = omic.list,
list_alphas = list_alphas,
list_betas = list_betas,
signal_annotation = signal_annotation,
factor_structure = factor_structure,
factor_map = factor_omic_map
)
return(sim_object)
}
sim_obj <- OmixCraftMultiHD(
vector_features = c(3000, 2500, 2000),
n_samples = 100,
n_factors = 5,
snr = 3,
signal.samples = c(5, 1),
signal.features = list(
c(3, 0.3),   # omic1 signal mean/sd
c(2.5, 0.25),# omic2 signal mean/sd
c(2, 0.2)    # omic3 signal mean/sd
),
factor_structure = "mixed",
num.factor = "multiple",
seed = 123
)
# View available elements
names(sim_obj)
# Plot a heatmap of the concatenated dataset (if plot_simData is adapted for M_SUMO)
plot_simData(sim_object = sim_obj, data = "merged", type = "heatmap")
abline(h=4500)
abline(h=2000)
0.15*2000
0.25*4000
0.20*4000
0.15*4000
#' @param n_samples Total number of samples across all omics
#' @param n_factors Number of latent factors
#' @param snr Signal-to-noise ratio
#' @param signal.samples Mean and SD for generating sample signals (e.g., c(mean, sd))
#' @param signal.features List of vectors with mean and SD for features for each omic (e.g., list(c(3,0.2), c(2.5,0.15)))
#' @param factor_structure Character. "shared", "exclusive", "mixed", or "custom" factor distribution
#' @param num.factor Character. "multiple" (default)
#' @param seed Optional. Set random seed for reproducibility
#' @return A list containing simulated omics, annotations, and factors
#' @export
OmixCraftMultiHD <- function(
vector_features,
n_samples,
n_factors,
snr = 2,
signal.samples = c(5, 1),
signal.features = NULL,
factor_structure = "mixed",
num.factor = "multiple",
seed = NULL
) {
if (!is.null(seed)) set.seed(seed)
# Validate input
if (length(vector_features) < 3) stop("Provide at least 3 omics for M_SUMO simulation")
k <- length(vector_features)
if (!is.list(signal.features) || length(signal.features) != k) {
stop("signal.features must be a list of length equal to vector_features")
}
if (!num.factor %in% c("multiple")) stop("Only 'multiple' is supported in M_SUMO")
if (!factor_structure %in% c("shared", "exclusive", "mixed", "custom")) stop("Invalid factor_structure option")
# Step 1: Divide samples into non-overlapping blocks for each factor with sequential indices and random gaps
assigned_indices_samples <- list()
used_indices <- c()
max_range <- n_samples
available_indices <- setdiff(1:max_range, used_indices)
i <- 1
while (i <= n_factors && length(available_indices) > 5) {
block_size <- sample(5:min(ceiling(n_samples / n_factors) + 5, length(available_indices)), 1)
possible_starts <- available_indices[available_indices + block_size - 1 <= max(available_indices)]
if (length(possible_starts) == 0) break
start_idx <- sample(possible_starts, 1)
block <- start_idx:(start_idx + block_size - 1)
if (all(block %in% available_indices)) {
assigned_indices_samples[[paste0("factor", i)]] <- block
used_indices <- c(used_indices, block)
available_indices <- setdiff(1:max_range, used_indices)
i <- i + 1
} else {
# skip block if overlap found
available_indices <- setdiff(available_indices, start_idx)
}
# Attempt to assign empty factor slots with remaining space if needed
while (i <= n_factors && length(available_indices) >= 5) {
block_size <- sample(5:min(ceiling(n_samples / n_factors) + 5, length(available_indices)), 1)
possible_starts <- available_indices[available_indices + block_size - 1 <= max(available_indices)]
if (length(possible_starts) == 0) break
start_idx <- sample(possible_starts, 1)
block <- start_idx:(start_idx + block_size - 1)
if (all(block %in% available_indices)) {
assigned_indices_samples[[paste0("factor", i)]] <- block
used_indices <- c(used_indices, block)
available_indices <- setdiff(1:max_range, used_indices)
i <- i + 1
} else {
available_indices <- setdiff(available_indices, start_idx)
}
# Final fallback to fill any remaining factor slots with random valid blocks
while (i <= n_factors) {
fallback_size <- min(5, length(available_indices))
if (fallback_size < 5) {
assigned_indices_samples[[paste0("factor", i)]] <- sample(1:n_samples, 5)
} else {
fallback_start <- sample(available_indices[1:(length(available_indices) - fallback_size + 1)], 1)
fallback_block <- fallback_start:(fallback_start + fallback_size - 1)
assigned_indices_samples[[paste0("factor", i)]] <- fallback_block
used_indices <- c(used_indices, fallback_block)
available_indices <- setdiff(1:max_range, used_indices)
}
i <- i + 1
}
# Initialize tracking containers
omic.list <- vector("list", k)
list_alphas <- list()
list_betas <- vector("list", k)
signal_annotation <- list(samples = assigned_indices_samples)
# Continue with latent factor design...
# (to be implemented in next chunk)
# Step 2: Define factor allocation across omics
factor_omic_map <- list()
for (i in 1:n_factors) {
if (factor_structure == "shared") {
factor_omic_map[[paste0("factor", i)]] <- 1:k
} else if (factor_structure == "exclusive") {
assigned <- sample(1:k, 1)
factor_omic_map[[paste0("factor", i)]] <- assigned
} else if (factor_structure == "mixed") {
assigned <- sort(sample(1:k, sample(1:k, 1)))
factor_omic_map[[paste0("factor", i)]] <- assigned
} else if (factor_structure == "custom") {
stop("Custom factor_structure currently not supported in this version")
}
# Step 3: Create alphas (sample scores) for each factor
for (i in 1:n_factors) {
scores <- rnorm(n_samples, mean = signal.samples[1], sd = signal.samples[2])
alpha_vec <- numeric(n_samples)
alpha_vec[assigned_indices_samples[[paste0("factor", i)]]] <- scores[assigned_indices_samples[[paste0("factor", i)]]]
list_alphas[[paste0("alpha", i)]] <- alpha_vec
}
# Step 4: Generate feature weights (betas) and construct omic-specific datasets
for (omic_idx in 1:k) {
n_features <- vector_features[omic_idx]
feature_mean <- signal.features[[omic_idx]][1]
feature_sd <- signal.features[[omic_idx]][2]
omic_data <- matrix(0, nrow = n_samples, ncol = n_features)
list_betas[[omic_idx]] <- list()
# Keep track of used feature blocks for this omic
used_feature_blocks <- list()
for (factor_i in 1:n_factors) {
# sequential function
generate_sequential_feature_block <- function(available_indices, min_percent = 0.1, max_percent = 0.15, used_blocks = list()) {
total_features <- max(available_indices)
min_block_size <- max(5, ceiling(total_features * min_percent))
max_block_size <- min(ceiling(total_features * max_percent), length(available_indices))
block_size <- sample(min_block_size:max_block_size, 1)
possible_starts <- available_indices[available_indices + block_size - 1 <= max(available_indices)]
for (start_idx in sample(possible_starts)) {
block <- start_idx:(start_idx + block_size - 1)
# Check overlap
overlaps <- any(unlist(lapply(used_blocks, function(x) any(block %in% x))))
if (!overlaps && all(block %in% available_indices)) {
return(block)
}
return(integer(0))  # Return empty if no valid block
}
# end function
factor_name <- paste0("factor", factor_i)
if (!(omic_idx %in% factor_omic_map[[factor_name]])) next
# Generate a non-overlapping, sequential feature block
available_indices <- setdiff(1:n_features, unlist(used_feature_blocks))
feature_block <- generate_sequential_feature_block(available_indices, used_blocks = used_feature_blocks)
# Store for future overlap checks
used_feature_blocks[[factor_name]] <- feature_block
# Assign feature weights
beta <- rnorm(n_features, mean = 0, sd = 0.01)
beta[feature_block] <- rnorm(length(feature_block), mean = feature_mean + 0.5 * factor_i, sd = feature_sd)
list_betas[[omic_idx]][[paste0("beta", factor_i)]] <- beta
alpha <- list_alphas[[paste0("alpha", factor_i)]]
omic_data <- omic_data + outer(alpha, beta)
}
# Add noise
signal_variance <- var(as.vector(omic_data))
noise_sd <- sqrt(signal_variance / snr)
noise_matrix <- matrix(rnorm(n_samples * n_features, mean = 0, sd = noise_sd), nrow = n_samples)
omic_data <- omic_data + noise_matrix
# Store
colnames(omic_data) <- paste0("omic", omic_idx, "_feature_", 1:n_features)
rownames(omic_data) <- paste0("sample_", 1:n_samples)
omic.list[[omic_idx]] <- omic_data
}
signal_annotation$features <- list_betas
# Step 5: Finalize simulated object
names(omic.list) <- paste0("omic", seq_len(k))
concatenated_dataset <- do.call(cbind, omic.list)
rownames(concatenated_dataset) <- paste0("sample_", seq_len(n_samples))
sim_object <- list(
concatenated_datasets = list(concatenated_dataset),
omics = omic.list,
list_alphas = list_alphas,
list_betas = list_betas,
signal_annotation = signal_annotation,
factor_structure = factor_structure,
factor_map = factor_omic_map
)
return(sim_object)
}
sim_obj <- OmixCraftMultiHD(
vector_features = c(3000, 2500, 2000),
n_samples = 100,
n_factors = 1,
snr = 3,
signal.samples = c(5, 1),
signal.features = list(
c(3, 0.3),   # omic1 signal mean/sd
c(2.5, 0.25),# omic2 signal mean/sd
c(2, 0.2)    # omic3 signal mean/sd
),
factor_structure = "mixed",
num.factor = "unique",
seed = 123
)
sim_obj <- OmixCraftMultiHD(
vector_features = c(3000, 2500, 2000),
n_samples = 100,
n_factors = 3,
snr = 3,
signal.samples = c(5, 1),
signal.features = list(
c(3, 0.3),   # omic1 signal mean/sd
c(2.5, 0.25),# omic2 signal mean/sd
c(2, 0.2)    # omic3 signal mean/sd
),
factor_structure = "shared",
num.factor = "multiple",
seed = 123
)
sim_obj <- OmixCraftMultiHD(
vector_features = c(3000, 2500, 2000),
n_samples = 100,
n_factors = 3,
snr = 3,
signal.samples = c(5, 1),
signal.features = list(
c(3, 0.3),   # omic1 signal mean/sd
c(2.5, 0.25),# omic2 signal mean/sd
c(2, 0.2)    # omic3 signal mean/sd
),
factor_structure = "exclusive",
num.factor = "multiple",
seed = 123
)
# Plot a heatmap of the concatenated dataset (if plot_simData is adapted for M_SUMO)
plot_simData(sim_object = sim_obj, data = "merged", type = "heatmap")
abline(h=4500)
abline(h=2000)
